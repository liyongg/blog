{
  "hash": "c5110c07474fae8b8a69a0595c0b530a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Translating PDF content using an LLM\"\ndate: \"2024-04-03\"\ncategories: [text mining, deep learning, pytorch]\ndescription: \"CN: Translating PDF content using an LLM!\"\ncode-fold: false\n---\n\nI have an extremely interesting and ambitious project that I am working on where I use React Native for the front end, and FastAPI as the backend.\nOne of the things I am considering to do is to include the use of a Large Language Model (LLM).\nLLMs have been the hype for quite some time now, and I thought it was time to put one to use, aside from my usual ChatGPT prompts that I run.\n\nToday I will use an LLM to translate content that we will extract from a PDF.\nNot very coincidentally it is a Dutch vocabulary list, which I want to translate to Mandarin Chinese.\n\n## Step 1: Finding a dataset\n\nThe very first relevant hit on Google brought me to a [NT2 Vocabulary List](https://www.nt2.nl/documenten/dm-derde_ronde-woordenlijst-lowres.pdf){target=\"_blank\"}.\nLet's save this PDF as `vocab.pdf`.\n\n## Step 2: Exploring the PDF using `pypdf`\n\n::: {#b9fa0e9a .cell execution_count=1}\n``` {.python .cell-code}\nfrom pypdf import PdfReader\nreader = PdfReader(\"vocab.pdf\")\n```\n:::\n\n\nWe should at least check if it indeed has read correctly that `vocab.pdf` contains 36 pages\n\n::: {#8206c6c0 .cell execution_count=2}\n``` {.python .cell-code}\nprint(f\"There are {len(reader.pages)} pages.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere are 36 pages.\n```\n:::\n:::\n\n\nAlright, seems good!\n\n## Step 3: Extracting text\n\nThe `pages` value is a list of `PageObject` objects and each of these come with the `extract_text()` method.\nThe extracted content from the first page is the following:\n\n::: {#92924cd2 .cell execution_count=3}\n``` {.python .cell-code}\nfirst_page = reader.pages[0]\ntext_first_page = first_page.extract_text()\nprint(text_first_page)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 Woordenlijst\nnr. cursief woord uit de tekst uitleg\nLes 1\n1 gevorderden mensen die al een tijd bezig zijn met een studie of vaardigheid en dus enige \nkennis en ervaring hebben; de gevorderde\n2 gemeenschappelijk met verschillende mensen dezelfde eigenschap of ruimte hebben\n3 raden to guess/erraten/deviner/tahmin etmek; raden-raadde-geraden \n4 afvragen jezelf een vraag stellen; afvragen-vroeg af-afgevraagd \n5 stelt … voor dat stelt niks voor = dat is helemaal niet belangrijk; voorstelde-stelde voor-\nvoorgesteld \n6 piepklein heel erg klein \n7 bomvol heel erg vol\n8 carpoolen met twee of meer mensen van één auto gebruikmaken om geld en het milieu te \nsparen; vooral van en naar je werk\n9 omelet (de) een mengsel van gebakken eieren; omeletten\n10 kebab gebakken vlees van een soort grill\n11 yoghurt zuur zuivelproduct gemaakt van melk, wordt meestal gegeten na het avondeten of bij het ontbijt\n12 chocola (de) bruin of wit snoep, gemaakt van cacao en suiker\n13 tof goed, leuk, aardig\n14 Hebreeuws (het) Hebreeuws = de Hebreeuwse taal (wordt gesproken in Israël)\n15 paradijs (het) een ideale, mooie en rustige plaats; de tuin waarin Adam en Eva woonden volgens de Bijbel en de Koran; de paradijzen \n16 schaken een spel spelen met 16 witte en 16 zwarte figuren op een bord met witte en zwarte vierkantjes; schaken-schaakte-geschaakt \n17 Perzisch (het) Perzisch = de Perzische taal = het Farsi (wordt gesproken in Iran)\n18 Indonesisch (het) Indonesisch = de Indonesische taal\n19 sowieso Duits: in elk geval\n20 terechtgekomen (toevallig) op een bepaalde plaats komen; terechtkomen-kwam terecht-terechtgekomen \n21 uitgeleend voor een tijdje aan iemand in gebruik gegeven; uitlenen-leende uit-uitgeleend \n22 verklap iets vertellen wat eigenlijk geheim moet blijven; verklappen-verklapte-verklapt \n23 discussiëren met argumenten bespreken; discussiëren-discussieerde-gediscussieerd\n24 verbazen het zal je verbazen = je zult wel verbaasd zijn. Dat verbaast me; verbazen-verbaasde-verbaasd\n25 cijfers getallen\n26 taalkundige linguïst, expert op het gebied van talen\n27 beschrijving (de) een verhaal vertellen over iets of iemand of over een gebeurtenis; beschrijvingen\n28 grafiek (de) figuur uit de statistiek met lijnen om cijfers beter te kunnen begrijpen; grafieken\n29 begrijpelijk goed te begrijpen\n30 daarover over dat onderwerp\n31 quitte quitte staan: gelijk staan; evenveel punten of evenveel hebben\n32 buurlanden de buren van een land; Duitsland en België zijn de buurlanden van Nederland; het buurland\n33 vanouds sinds lang geleden\n34 weggeeft hier: uitleent, de ene taal neemt woorden uit de andere taal over; weggeven-gaf weg-weggegeven \n35 aanbieding iets in de aanbieding hebben = iets goeds of waardevols wat je weg wilt geven of wilt verkopen\n36 emigreerden verhuisden naar een ander land; emigreren-emigreerde-geëmigreerd \n37 verhuisden van vaste plaats veranderen; verhuizen-verhuisde-verhuisd \n38 schets (de) tekening of ontwerp in grote lijnen; de schetsen\n39 schaats (de) schoen met ijzer eronder; om mee over het ijs te bewegen; schaatsen\n```\n:::\n:::\n\n\nIt is evident from scrolling through the PDF that it is quite well-structured: every word and its meaning start with some index.\nThis is reaffirmed with the string printed above.\nHowever, if we would use the string representation above, it would be incredibly tedious to find some algorithm that can help extract the most important information: the words and their corresponding meaning.\nOne naive way would be to define\n\n1.  the first word as the index;\n2.  the second word as the word in the vocabulary list;\n3.  the remaining words to be the corresponding meaning.\n\nBut this sucks.\nTo see that, let's first split the lines for this very long string and show the first 10 results.\n\n::: {#9f6de2f2 .cell execution_count=4}\n``` {.python .cell-code}\nlines = text_first_page.splitlines()[:9]\nprint(\"\\n\".join(lines))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 Woordenlijst\nnr. cursief woord uit de tekst uitleg\nLes 1\n1 gevorderden mensen die al een tijd bezig zijn met een studie of vaardigheid en dus enige \nkennis en ervaring hebben; de gevorderde\n2 gemeenschappelijk met verschillende mensen dezelfde eigenschap of ruimte hebben\n3 raden to guess/erraten/deviner/tahmin etmek; raden-raadde-geraden \n4 afvragen jezelf een vraag stellen; afvragen-vroeg af-afgevraagd \n5 stelt … voor dat stelt niks voor = dat is helemaal niet belangrijk; voorstelde-stelde voor-\n```\n:::\n:::\n\n\nBy using the naive way to divide the strings, the final line would give\n\n| Index | Word  | Meaning                                                                                  |\n|-----------------|-----------------|---------------------------------------|\n| 5     | stelt | ... voor dat stelt niks voor = dat is helemaal niet belangrijk; voorstelde-stelde voor-' |\n\nBut the actual result should be\n\n| Index | Word           | Meaning                                                                         |\n|-----------------|-----------------|--------------------------------------|\n| 5     | stelt ... voor | dat stelt niks voor = dat is helemaal niet belangrijk; voorstelde-stelde voor-' |\n\nNot great, so we have to find something else.\nThe same method has an argument `extraction_mode` which is set to `plain` by default.\nIf we use the `extract_text(extraction_mode=\"layout\")`, it allows us to apply a more rigid and robust method.\n\n::: {#a392600d .cell execution_count=5}\n``` {.python .cell-code}\ntext_first_page = first_page.extract_text(extraction_mode=\"layout\")\nlines = text_first_page.splitlines()[:9]\nprint(\"\\n\".join(lines))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnr.                                                                                                           cursief woord uit de tekst                                                                                                           uitleg\n\n\n                                                              Les 1\n\n1                                                                                                                             gevorderden                                                                                                                                                                                                                                                                                   mensen die al een tijd bezig zijn met een studie of vaardigheid en dus enige\n                                                                                                                                                                                                                                                            kennis en ervaring hebben; de gevorderde\n2                                                                                                                             gemeenschappelijk                                                                                                                                                                                       met verschillende mensen dezelfde eigenschap of ruimte hebben\n3                                                                                                                             raden                                                                                                                                                                                                                                                                                                                                                                             to guess/erraten/deviner/tahmin etmek; raden-raadde-geraden\n```\n:::\n:::\n\n\nNow there are a lot more whitespace characters between each 'column'.\nA better - not necessarily the best - method would be to:\n\n1.  Filter the lines which are non-empty and start with a digit.\n2.  Aggregate the rows which belong to one word/meaning combination.\n3.  Split each line by at least three or more whitespace characters.\n4.  Define the first part as the word and define the remaining text as its meaning.\n5.  Create a Pandas DataFrame object for each page.\n6.  Concatenate all dataframes into one dataframe.\n\nLet's set up this pipeline.\n\n## Step 4: Set up a processing pipeline\n\nBelow is the `VocabExtractor.py` file containing all the necessary steps to create a Pandas DataFrame containing the entire vocabulary list.\nThe code should be self-explanatory, but we will highlight and explain some bits.\n\n::: {#5003d0e8 .cell execution_count=6}\n``` {.python .cell-code}\nimport pandas as pd\nfrom pypdf import PdfReader\n\n\nclass VocabExtractor:\n    def __init__(self, pdf_path):\n        self.pdf_path = pdf_path\n\n    def validate_lines(self, lines):\n        return [line for line in lines if line and line[0].isdigit()]\n\n    def remove_overflow_lines(self, lines):  # <1>\n        res = [lines[0]]  # <1>\n        for current_item, next_item in zip(lines, lines[1:]):  # <1>\n            if next_item[0].isdigit():  # <1>\n                res.append(next_item)  # <1>\n            else:  # <1>\n                res[-1] += next_item  # <1>\n        return res  # <1>\n\n    def trim_index(self, lines):  # <2>\n        no_index_lines = [line[line.find(' '):] for line in lines]  # <2>\n        return [line.strip() for line in no_index_lines]  # <2>\n\n    def lines_to_df(self, lines):\n        split_lines = [line.split(\"  \") for line in lines]\n        words = [line[0] for line in split_lines]\n        meanings = [''.join(line[1:]).strip() for line in split_lines]\n        return pd.DataFrame.from_dict({\"Words\": words, \"Meanings\": meanings})\n\n    def pipeline_lines(self, text):\n        lines = text.splitlines()\n        page_lines = self.validate_lines(lines)\n        no_overflow_lines = self.remove_overflow_lines(page_lines)\n        no_index_lines = self.trim_index(no_overflow_lines)\n        return self.lines_to_df(no_index_lines)\n\n    def extract_from_pdf(self):  # <3>\n        reader = PdfReader(self.pdf_path)  # <3>\n        pages = reader.pages  # <3>\n\n        res = []  # <3>\n\n        for page in pages:  # <3>\n            page_text = page.extract_text(extraction_mode=\"layout\")  # <3>\n            res.append(self.pipeline_lines(page_text))  # <3>\n\n        df = pd.concat(res, ignore_index=True)  # <3>\n        df = df[df[\"Words\"] != \"Derde Ronde Nederlands voor buitenlanders\"].reset_index(\n            drop=True)  # <3>\n\n        return df  # <3>\n```\n:::\n\n\n1.  Initialise a list of which its only element is the first line of extracted text from the page. Then loop over the pairs of subsequent item pairs and check if the second element of the pair starts with a digit. If it does, then there is no overflow and the succeeding element is a valid new line of text which we append to the initial list. If it does not, then it means the line was overflown and we add this newline to the final element of the initial list.\n2.  For each line, extract the substring starting from the first 'word' following the first whitespace character. Effectively it removes the first word from each line, which should really be the index of the line.\n3.  Combine all methods defined above and loop through the pages to create a dataframe for each page. Finally concatenate all these dataframes and filter the lines which contain the 'word' \"Derde Ronde Nederlands voor buitenlanders\", as it is noise from the footer that appear on every even page.[^1]\n\n[^1]: It would also have been possible to crop the page before extracting the text, but to me it seemed like more work experimenting with the dimensions.\n\nNow we can run the following code:\n\n::: {#0e74b4f1 .cell execution_count=7}\n``` {.python .cell-code}\nvocab_extractor = VocabExtractor(\"vocab.pdf\")\nextracted_data = vocab_extractor.extract_from_pdf()\nprint(extracted_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  Words                                           Meanings\n0           gevorderden  mensen die al een tijd bezig zijn met een stud...\n1     gemeenschappelijk  met verschillende mensen dezelfde eigenschap o...\n2                 raden  to guess/erraten/deviner/tahmin etmek; raden-r...\n3              afvragen  jezelf een vraag stellen; afvragen-vroeg af-af...\n4          stelt … voor  dat stelt niks voor = dat is helemaal niet bel...\n...                 ...                                                ...\n1764            matchen  combineren, koppelen, bij elkaar brengen; matc...\n1765      op goed geluk          willekeurig, blindelings, zonder planning\n1766          presteren  prestaties leveren, werken; presteren-presteer...\n1767        revalideren  weer leren bewegen na een ongeluk of operatie;...\n1768        gerepareerd  in orde gemaakt; repareren-repareerde-gerepareerd\n\n[1769 rows x 2 columns]\n```\n:::\n:::\n\n\nThe PDF also contained 1769 words.\nLooks good to me!\n\n## Step 5: Incorporating a LLM\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}